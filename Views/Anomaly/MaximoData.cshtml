@{
    ViewData["Title"] = "Anomaly Detection";
}

<br>
<h4>Ladda upp fil för att validera Maximo-data</h4>
<br>

<form asp-controller="Anomaly" asp-action="UploadFile" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <input type="file" name="file" class="form-control" accept=".csv,.json" required />
        <input type="hidden" name="view" value="MaximoData" />
        <p><em>Följande format stöds: CSV, JSON</em></p>
    </div>
    <button type="submit" class="btn btn-primary">Ladda upp</button>
</form>

@if (ViewData["FileInfo"] is Q_verify_2025.Models.FileInfoModel fileInfoModel)
{
    @await Html.PartialAsync("FileInfoPartial", fileInfoModel)
}

@if (ViewData["Uploaded"] is true)
{
    <form asp-controller="Anomaly" asp-action="Analyze" method="post">
        <input type="hidden" name="view" value="MaximoData" />
        <input type="hidden" name="route" value="analyze-maximo-data" />
        <button type="submit" class="btn btn-success mt-3">Analysera</button>
    </form>
}

@if (ViewData["AnalysisResult"] is Newtonsoft.Json.Linq.JArray analysisResult)
{
    int anomalyCount = 0;

    foreach (var anomaly in analysisResult)
    {
        var anomalies = anomaly["anomaly_fields"] as Newtonsoft.Json.Linq.JArray;
        if (anomalies != null && anomalies.Count > 0)
        {
            anomalyCount++;
        }
    }

    <h6 class="@(anomalyCount > 0 ? "text-danger bg-light" : "text-success bg-light")">
        @(anomalyCount > 0 ? "Antal avvikelser: " + anomalyCount : "Inga avvikelser upptäckta!")
    </h6>

    @if (anomalyCount > 0)
    {
          
        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table class="table table-bordered table-striped mt-3">
                <thead class="thead-dark">
                    <tr>
                        <th>Competences</th>
                        <th>Pmnum</th>
                        <th>Cxlineroutenr</th>
                        <th>Location</th>
                        <th>Description</th>
                        <th>Errors</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var anomaly in analysisResult)
                    {
                        var input = anomaly["input"];
                        var errorsRaw = anomaly["anomaly_fields"];
                        var errorList = new List<string>();

                        if (errorsRaw is Newtonsoft.Json.Linq.JArray errorArray)
                        {
                            foreach (var err in errorArray)
                            {
                                errorList.Add(err.ToString());
                            }
                        }
                        else if (errorsRaw != null)
                        {
                            errorList.Add(errorsRaw.ToString());
                        }

                        if (errorList.Count > 0)
                        {
                            <tr>
                                <td>@input?["competences"]</td>
                                <td>@input?["pmnum"]</td>
                                <td>@input?["cxlineroutenr"]</td>
                                <td>@input?["location"]</td>
                                <td>@input?["description"]</td>
                                <td>
                                    <ul style="list-style-type: none; padding-left: 0; margin-bottom: 0;">
                                        @foreach (var error in errorList)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        
        <div class="d-flex justify-content-between mb-3">
    <div class="d-flex align-items-center">
        <label for="rowsPerPage" style="margin-right: 5px; font-size: 0.9rem;">Visa:</label>
        <select id="rowsPerPage" class="form-control" style="width: auto; height: 30px; padding: 3px; font-size: 0.9rem">
            <option value="5">5 rader</option>
            <option value="10">10 rader</option>
            <option value="25">25 rader</option>
            <option value="50">50 rader</option>
        </select>
    </div>
    <div>
        <i id="prevPage" class="bi bi-arrow-left-circle" style="font-size: 1.5rem; cursor: pointer; opacity: 0.6; margin-right: 10px;" aria-hidden="true"></i>
        <i id="nextPage" class="bi bi-arrow-right-circle" style="font-size: 1.5rem; cursor: pointer; opacity: 0.6;" aria-hidden="true"></i>
    </div>
</div>
    }
}

<script>
    let currentPage = 1;
    let rowsPerPage = 5;
    const rows = document.querySelectorAll("table tbody tr");
    const totalRows = rows.length;
    const totalPages = Math.ceil(totalRows / rowsPerPage);

    function updateTable() {
        const startRow = (currentPage - 1) * rowsPerPage;
        const endRow = startRow + rowsPerPage;

        rows.forEach((row, index) => {
            if (index >= startRow && index < endRow) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });

        document.getElementById("prevPage").style.opacity = currentPage === 1 ? 0.4 : 0.6;
        document.getElementById("nextPage").style.opacity = currentPage === totalPages ? 0.4 : 0.6;
    }

    document.getElementById("rowsPerPage").addEventListener("change", function() {
        rowsPerPage = parseInt(this.value);
        currentPage = 1;  // Reset to the first page
        updateTable();
    });

    document.getElementById("prevPage").addEventListener("click", function() {
        if (currentPage > 1) {
            currentPage--;
            updateTable();
        }
    });

    document.getElementById("nextPage").addEventListener("click", function() {
        if (currentPage < totalPages) {
            currentPage++;
            updateTable();
        }
    });

    // Initialize table on load
    updateTable();
</script>
